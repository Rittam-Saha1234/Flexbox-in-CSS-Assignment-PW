Explain the role of the following key properties in the flexbox layout model
    1. Justify-content:- In the Flexbox layout model, the justify-content property plays a crucial role in controlling the alignment and distribution of flex items along the main axis (horizontally for rows and vertically for columns).

    justify-content specifies how the flex items are spaced within the flex container. It takes the following values:
        1. flex-start: Items are packed toward the start of the main axis (default).
        2. flex-end: Items are packed toward the end of the main axis.
        3. center: Items are centered along the main axis.
        4. space-between: Items are evenly spaced, with the first item at the start and the last item at the end.
        5. space-around: Items are evenly spaced, with equal space around each item.
        6. space-evenly: Items are evenly spaced, with equal space between and around each item.

By adjusting the justify-content property, you can control the alignment and distribution of flex items, creating various layout effects, such as:
        - Aligning items to the left, right, or center
        - Spacing items evenly or unevenly
        - Creating a balanced or asymmetrical layout

This property is essential in Flexbox layouts, as it helps you achieve the desired alignment and spacing of items within the container.




    2. Align-items:- In the Flexbox layout model, the align-items property controls the alignment of flex items along the cross axis (perpendicular to the main axis). It specifies how the items are aligned within the flex container.

    align-items takes the following values:
        1. flex-start: Items are aligned to the start of the cross axis (top for horizontal, left for vertical).
        2. flex-end: Items are aligned to the end of the cross axis (bottom for horizontal, right for vertical).
        3. center: Items are centered along the cross axis.
        4. baseline: Items are aligned to their baselines (text baseline).
        5. stretch: Items are stretched to fill the container (default).

    The align-items property affects the following aspects:
        - Vertical alignment (for horizontal flex containers)
        - Horizontal alignment (for vertical flex containers)
        - Item height and width (when stretch is used)

    By adjusting align-items, you can:
        - Align items to the top, bottom, or center
        - Create a balanced or asymmetrical layout
        - Stretch items to fill the container
        - Align text baselines

    This property is essential in Flexbox layouts, as it helps you control the alignment and spacing of items within the container, creating a visually appealing and balanced layout.



    3.Gap:- In the Flexbox layout model, the gap property (also known as row-gap and column-gap) controls the spacing between flex items. It specifies the size of the gaps between items along the main axis (rows) and/or cross axis (columns).

    gap takes a length value (e.g., 10px, 2em, etc.) or a percentage value (e.g., 10%).

    The gap property affects the following aspects:
        - Row gap: spacing between items along the main axis (horizontal for rows)
        - Column gap: spacing between items along the cross axis (vertical for columns)

    By adjusting gap, you can:
        - Add space between items
        - Control the density of items
        - Create a consistent spacing pattern
        - Improve readability and visual appeal

    Note that gap is a shorthand property for row-gap and column-gap. You can also use these individual properties to control spacing along specific axes.

    For example:
        - gap: 10px sets both row and column gaps to 10px
        - row-gap: 10px sets only the row gap to 10px
        - column-gap: 20px sets only the column gap to 20px

    The gap property is a convenient way to add spacing between flex items, making it easier to create balanced and harmonious layouts.



    4.Flex-direction:- In the Flexbox layout model, the flex-direction property specifies the direction of the flex items within the flex container. It defines the main axis of the layout, which determines how items are laid out and aligned.

    flex-direction takes the following values:
        1. row (default): Items are laid out horizontally, from left to right (or right to left in RTL languages).
        2. row-reverse: Items are laid out horizontally, from right to left (or left to right in RTL languages).
        3. column: Items are laid out vertically, from top to bottom.
        4. column-reverse: Items are laid out vertically, from bottom to top.

    The flex-direction property affects the following aspects:
        - Main axis direction (horizontal or vertical)
        - Item order and layout
        - Alignment and justification (using justify-content and align-items)

    By adjusting flex-direction, you can:
        - Change the layout direction (horizontal or vertical)
        - Reverse the item order
        - Adapt the layout to different screen sizes and orientations

    For example:
        - flex-direction: row creates a horizontal layout, ideal for navigation bars or image galleries.
        - flex-direction: column creates a vertical layout, suitable for lists or mobile app layouts.

    The flex-direction property is a fundamental aspect of Flexbox, allowing you to control the overall layout direction and item flow.



    5.Flex-wrap:- In the Flexbox layout model, the flex-wrap property controls whether flex items wrap to a new line or column when there is not enough space on the current line.

    flex-wrap takes the following values:
        1. nowrap (default): Items do not wrap, and will shrink or overflow if necessary.
        2. wrap: Items wrap to a new line or column when there is not enough space.
        3. wrap-reverse: Items wrap to a new line or column in reverse order.

    The flex-wrap property affects the following aspects:
        - Item wrapping behavior
        - Layout overflow and shrinkage
        - Multi-line or multi-column layouts

    By adjusting flex-wrap, you can:
        - Control whether items wrap or shrink
        - Create multi-line or multi-column layouts
        - Prevent overflow and ensure items fit within the container

    For example:
        - flex-wrap: nowrap keeps all items on a single line, even if they overflow.
        - flex-wrap: wrap allows items to wrap to a new line, creating a multi-line layout.

    Common use cases for flex-wrap include:\
        - Creating responsive layouts that adapt to different screen sizes
        - Building multi-column or multi-row layouts
        - Handling varying item sizes and shapes

    The flex-wrap property is essential in Flexbox, allowing you to control how items behave when there is not enough space, and creating more flexible and responsive layouts.